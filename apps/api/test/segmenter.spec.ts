import { splitParagraphToSentences, splitToBlocks, setSegmenterOptions } from '../src/modules/blocks/utils/segmenter';

beforeAll(() => {
  // Kh√≥a c·∫•u h√¨nh ƒë·ªÉ test ·ªïn ƒë·ªãnh, kh√¥ng ph·ª• thu·ªôc ENV b√™n ngo√†i
  setSegmenterOptions({ tailMergeEnabled: true, tailMergeMin: 8 });
});

function wc(s: string) {
  return s.trim().split(/\s+/).filter(Boolean).length;
}

describe('segmenter.splitParagraphToSentences', () => {
  test('01 ‚Äì single sentence', () => {
    const r = splitParagraphToSentences('Xin ch√†o th·∫ø gi·ªõi.');
    expect(r).toEqual(['Xin ch√†o th·∫ø gi·ªõi.']);
  });

  test('02 ‚Äì two sentences by period', () => {
    const r = splitParagraphToSentences('A. B.');
    expect(r).toEqual(['A.', 'B.']);
  });

  test('03 ‚Äì exclamation and question', () => {
    const r = splitParagraphToSentences('Tuy·ªát v·ªùi! B·∫°n ·ªïn ch·ª©?');
    expect(r).toEqual(['Tuy·ªát v·ªùi!', 'B·∫°n ·ªïn ch·ª©?']);
  });

  test('04 ‚Äì ellipsis (‚Ä¶) works', () => {
    const r = splitParagraphToSentences('Nghƒ© m√£i‚Ä¶ Cu·ªëi c√πng c≈©ng xong.');
    expect(r).toEqual(['Nghƒ© m√£i‚Ä¶', 'Cu·ªëi c√πng c≈©ng xong.']);
  });

  test('05 ‚Äì abbreviation TP.HCM not split', () => {
    const r = splitParagraphToSentences('T√¥i ·ªü TP.HCM. Tr·ªùi h√¥m nay ƒë·∫πp.');
    expect(r).toEqual(['T√¥i ·ªü TP.HCM.', 'Tr·ªùi h√¥m nay ƒë·∫πp.']);
  });

  test('06 ‚Äì Mr. inside sentence not split', () => {
    const r = splitParagraphToSentences('Mr. An ƒë·∫øn ƒë√∫ng gi·ªù.');
    expect(r).toEqual(['Mr. An ƒë·∫øn ƒë√∫ng gi·ªù.']);
  });

  test('07 ‚Äì v.v. inside sentence not split', () => {
    const r = splitParagraphToSentences('Ta c√≥ nhi·ªÅu l·ª±a ch·ªçn, v.v. H√£y c√¢n nh·∫Øc.');
    expect(r).toEqual(['Ta c√≥ nhi·ªÅu l·ª±a ch·ªçn, v.v. H√£y c√¢n nh·∫Øc.']); // c√πng m·ªôt c√¢u v√¨ kh√¥ng c√≥ d·∫•u k·∫øt th√∫c gi·ªØa ch·ª´ng
  });

  test('08 ‚Äì number with dot 1.000 does not split mid-sentence', () => {
    const r = splitParagraphToSentences('Gi√° l√† 1.000 ƒë·ªìng h√¥m nay.');
    expect(r).toEqual(['Gi√° l√† 1.000 ƒë·ªìng h√¥m nay.']);
  });

  test('09 ‚Äì paragraph break \\n\\n splits', () => {
    const r = splitParagraphToSentences('ƒêo·∫°n 1. C√¢u 2.\n\nƒêo·∫°n 2.');
    expect(r).toEqual(['ƒêo·∫°n 1.', 'C√¢u 2.', 'ƒêo·∫°n 2.']);
  });

  test('10 ‚Äì emoji does not break', () => {
    const r = splitParagraphToSentences('Xin ch√†o üòä. H√¥m nay ·ªïn.');
    expect(r).toEqual(['Xin ch√†o üòä.', 'H√¥m nay ·ªïn.']);
  });

  test('11 ‚Äì messy whitespaces are trimmed', () => {
    const r = splitParagraphToSentences('A.   B.   C. ');
    expect(r).toEqual(['A.', 'B.', 'C.']);
  });

  test('12 ‚Äì Vietnamese capitals after punctuation', () => {
    const r = splitParagraphToSentences('T·ªët qu√°! ·ªû ƒë√¢y m√°t.');
    expect(r).toEqual(['T·ªët qu√°!', '·ªû ƒë√¢y m√°t.']);
  });

  test('13 ‚Äì empty string returns []', () => {
    const r = splitParagraphToSentences('');
    expect(r).toEqual([]);
  });

  test('14 ‚Äì only spaces returns []', () => {
    const r = splitParagraphToSentences('    ');
    expect(r).toEqual([]);
  });

  test('15 ‚Äì USD abbreviation retained; then sentence end', () => {
    const r = splitParagraphToSentences('Gi√° 10 USD. T·ªët.');
    expect(r).toEqual(['Gi√° 10 USD.', 'T·ªët.']);
  });

  test('16 ‚Äì No. abbreviation not split', () => {
    const r = splitParagraphToSentences('No. 5 is good. Next.');
    expect(r).toEqual(['No. 5 is good.', 'Next.']);
  });

  test('17 ‚Äì long sentence (>25 words) chunks by commas', () => {
    const long = 'ƒê√¢y l√† m·ªôt c√¢u r·∫•t d√†i, ƒë∆∞·ª£c vi·∫øt ƒë·ªÉ ki·ªÉm tra kh·∫£ nƒÉng chia nh√≥m th·ªü c·ªßa thu·∫≠t to√°n, ' +
      'n√≥ c√≥ kh√° nhi·ªÅu t·ª´ v√† m·ªôt v√†i d·∫•u ph·∫©y ƒë·ªÉ l√†m m·ªëc, nh·∫±m ƒë·∫£m b·∫£o r·∫±ng c√¢u s·∫Ω ƒë∆∞·ª£c t√°ch h·ª£p l√Ω theo ƒë·ªô d√†i.';
    const r = splitParagraphToSentences(long);
    expect(r.length).toBeGreaterThan(1);
    // Ch·ªâ c√°c ƒëo·∫°n "ƒë·∫ßy ƒë·ªß" (tr·ª´ ƒëo·∫°n cu·ªëi) c·∫ßn >=10 t·ª´; ƒëo·∫°n cu·ªëi c√≥ th·ªÉ ng·∫Øn.
    r.slice(0, -1).forEach(seg => {
      expect(wc(seg)).toBeGreaterThanOrEqual(10);
      expect(wc(seg)).toBeLessThanOrEqual(30);
    });
    // ƒëo·∫°n cu·ªëi: ch·ªâ ki·ªÉm tra upper-bound
    expect(wc(r[r.length - 1])).toBeLessThanOrEqual(30);
  });

  test('18 ‚Äì long sentence without commas still chunks at max', () => {
    const long = Array.from({length: 60}, (_,i)=>`word${i+1}`).join(' ') + '.';
    const r = splitParagraphToSentences(long);
    expect(r.length).toBeGreaterThan(2); // 60 t·ª´ => kho·∫£ng 3 ƒëo·∫°n+
    r.forEach(seg => expect(wc(seg)).toBeLessThanOrEqual(30));
  });

  test('19 ‚Äì multi-sentence with different punctuations', () => {
    const r = splitParagraphToSentences('A! B? C...');
    // C... c√≥ d·∫•u ‚Ä¶; regex coi ƒë√≥ l√† terminator tr∆∞·ªõc kho·∫£ng tr·∫Øng + ch·ªØ c√°i ti·∫øp theo n·∫øu l√† hoa
    expect(r).toEqual(['A!', 'B?', 'C...']); // v·∫´n l√† m·ªôt c√¢u v√¨ kh√¥ng c√≥ ch·ªØ c√°i hoa sau ƒë√≥
  });

  test('20 ‚Äì bracket content does not confuse split', () => {
    const r = splitParagraphToSentences('N·ªôi dung (v√≠ d·ª•: TP.HCM) v·∫´n ·ªïn. K·∫øt th√∫c.');
    expect(r).toEqual(['N·ªôi dung (v√≠ d·ª•: TP.HCM) v·∫´n ·ªïn.', 'K·∫øt th√∫c.']);
  });

  test('21 ‚Äì semicolon as breath hint in long sentence', () => {
    const s = 'C√¢u n√†y d√†i nhi·ªÅu t·ª´; n√≥ d√πng ch·∫•m ph·∫©y ƒë·ªÉ g·ª£i √Ω ƒëi·ªÉm ng·∫Øt h·ª£p l√Ω nh·∫±m d·ªÖ ƒë·ªçc h∆°n v√† b·ªõt d√†i d√≤ng khi ph√°t √¢m.';
    const r = splitParagraphToSentences(s);
    // v√¨ ch·ªâ 1 d·∫•u ch·∫•m ·ªü cu·ªëi, segmenter c√≥ th·ªÉ c·∫Øt theo nh√≥m th·ªü -> >1 ƒëo·∫°n
    expect(r.length).toBeGreaterThanOrEqual(1); // c√≥ th·ªÉ 1 ho·∫∑c >1 t√πy s·ªë t·ª´; ch·∫•p nh·∫≠n c·∫£ hai
  });

  test('22 ‚Äì lowercase after dot should avoid split mid-sentence', () => {
    const r = splitParagraphToSentences('V√≠ d·ª• vi·∫øt t·∫Øt a.b th·ª≠ nghi·ªám. K·∫øt th√∫c.');
    // do lookahead c·∫ßn ch·ªØ hoa/ s·ªë n√™n "a.b th·ª≠" kh√¥ng b·ªã t√°ch
    expect(r).toEqual(['V√≠ d·ª• vi·∫øt t·∫Øt a.b th·ª≠ nghi·ªám.', 'K·∫øt th√∫c.']);
  });
});

describe('segmenter.splitToBlocks', () => {
  test('23 ‚Äì mono: paragraphs -> blocks with rows', () => {
    const raw = 'ƒêo·∫°n m·ªôt. C√¢u hai.\n\nƒêo·∫°n ba!';
    const blocks = splitToBlocks('mono', raw);
    expect(blocks.length).toBe(2);
    expect(blocks[0].rows.length).toBe(2);
    expect(blocks[1].rows.length).toBe(1);
  });

  test('24 ‚Äì dialog: [Name]: line -> speaker and rows', () => {
    const raw = '[Nam]: Xin ch√†o!\n[Lan]: Ch√†o b·∫°n, r·∫•t vui ƒë∆∞·ª£c g·∫∑p.';
    const blocks = splitToBlocks('dialog', raw);
    expect(blocks.length).toBe(2);
    expect(blocks[0].speaker).toBe('Nam');
    expect(blocks[1].speaker).toBe('Lan');
    expect(blocks[0].rows[0]).toMatch(/Xin ch√†o/);
  });

  test('25 ‚Äì dialog: malformed line -> speaker Unknown', () => {
    const raw = 'Xin ch√†o kh√¥ng c√≥ nh√£n.\n[Lan]: C√≥ nh√£n.';
    const blocks = splitToBlocks('dialog', raw);
    expect(blocks[0].speaker).toBe('Unknown');
    expect(blocks[1].speaker).toBe('Lan');
  });
});
