"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const segmenter_1 = require("../src/modules/blocks/utils/segmenter");
beforeAll(() => {
    (0, segmenter_1.setSegmenterOptions)({ tailMergeEnabled: true, tailMergeMin: 8 });
});
function wc(s) {
    return s.trim().split(/\s+/).filter(Boolean).length;
}
describe('segmenter.splitParagraphToSentences', () => {
    test('01 ‚Äì single sentence', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('Xin ch√†o th·∫ø gi·ªõi.');
        expect(r).toEqual(['Xin ch√†o th·∫ø gi·ªõi.']);
    });
    test('02 ‚Äì two sentences by period', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('A. B.');
        expect(r).toEqual(['A.', 'B.']);
    });
    test('03 ‚Äì exclamation and question', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('Tuy·ªát v·ªùi! B·∫°n ·ªïn ch·ª©?');
        expect(r).toEqual(['Tuy·ªát v·ªùi!', 'B·∫°n ·ªïn ch·ª©?']);
    });
    test('04 ‚Äì ellipsis (‚Ä¶) works', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('Nghƒ© m√£i‚Ä¶ Cu·ªëi c√πng c≈©ng xong.');
        expect(r).toEqual(['Nghƒ© m√£i‚Ä¶', 'Cu·ªëi c√πng c≈©ng xong.']);
    });
    test('05 ‚Äì abbreviation TP.HCM not split', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('T√¥i ·ªü TP.HCM. Tr·ªùi h√¥m nay ƒë·∫πp.');
        expect(r).toEqual(['T√¥i ·ªü TP.HCM.', 'Tr·ªùi h√¥m nay ƒë·∫πp.']);
    });
    test('06 ‚Äì Mr. inside sentence not split', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('Mr. An ƒë·∫øn ƒë√∫ng gi·ªù.');
        expect(r).toEqual(['Mr. An ƒë·∫øn ƒë√∫ng gi·ªù.']);
    });
    test('07 ‚Äì v.v. inside sentence not split', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('Ta c√≥ nhi·ªÅu l·ª±a ch·ªçn, v.v. H√£y c√¢n nh·∫Øc.');
        expect(r).toEqual(['Ta c√≥ nhi·ªÅu l·ª±a ch·ªçn, v.v. H√£y c√¢n nh·∫Øc.']);
    });
    test('08 ‚Äì number with dot 1.000 does not split mid-sentence', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('Gi√° l√† 1.000 ƒë·ªìng h√¥m nay.');
        expect(r).toEqual(['Gi√° l√† 1.000 ƒë·ªìng h√¥m nay.']);
    });
    test('09 ‚Äì paragraph break \\n\\n splits', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('ƒêo·∫°n 1. C√¢u 2.\n\nƒêo·∫°n 2.');
        expect(r).toEqual(['ƒêo·∫°n 1.', 'C√¢u 2.', 'ƒêo·∫°n 2.']);
    });
    test('10 ‚Äì emoji does not break', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('Xin ch√†o üòä. H√¥m nay ·ªïn.');
        expect(r).toEqual(['Xin ch√†o üòä.', 'H√¥m nay ·ªïn.']);
    });
    test('11 ‚Äì messy whitespaces are trimmed', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('A.   B.   C. ');
        expect(r).toEqual(['A.', 'B.', 'C.']);
    });
    test('12 ‚Äì Vietnamese capitals after punctuation', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('T·ªët qu√°! ·ªû ƒë√¢y m√°t.');
        expect(r).toEqual(['T·ªët qu√°!', '·ªû ƒë√¢y m√°t.']);
    });
    test('13 ‚Äì empty string returns []', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('');
        expect(r).toEqual([]);
    });
    test('14 ‚Äì only spaces returns []', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('    ');
        expect(r).toEqual([]);
    });
    test('15 ‚Äì USD abbreviation retained; then sentence end', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('Gi√° 10 USD. T·ªët.');
        expect(r).toEqual(['Gi√° 10 USD.', 'T·ªët.']);
    });
    test('16 ‚Äì No. abbreviation not split', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('No. 5 is good. Next.');
        expect(r).toEqual(['No. 5 is good.', 'Next.']);
    });
    test('17 ‚Äì long sentence (>25 words) chunks by commas', () => {
        const long = 'ƒê√¢y l√† m·ªôt c√¢u r·∫•t d√†i, ƒë∆∞·ª£c vi·∫øt ƒë·ªÉ ki·ªÉm tra kh·∫£ nƒÉng chia nh√≥m th·ªü c·ªßa thu·∫≠t to√°n, ' +
            'n√≥ c√≥ kh√° nhi·ªÅu t·ª´ v√† m·ªôt v√†i d·∫•u ph·∫©y ƒë·ªÉ l√†m m·ªëc, nh·∫±m ƒë·∫£m b·∫£o r·∫±ng c√¢u s·∫Ω ƒë∆∞·ª£c t√°ch h·ª£p l√Ω theo ƒë·ªô d√†i.';
        const r = (0, segmenter_1.splitParagraphToSentences)(long);
        expect(r.length).toBeGreaterThan(1);
        r.slice(0, -1).forEach(seg => {
            expect(wc(seg)).toBeGreaterThanOrEqual(10);
            expect(wc(seg)).toBeLessThanOrEqual(30);
        });
        expect(wc(r[r.length - 1])).toBeLessThanOrEqual(30);
    });
    test('18 ‚Äì long sentence without commas still chunks at max', () => {
        const long = Array.from({ length: 60 }, (_, i) => `word${i + 1}`).join(' ') + '.';
        const r = (0, segmenter_1.splitParagraphToSentences)(long);
        expect(r.length).toBeGreaterThan(2);
        r.forEach(seg => expect(wc(seg)).toBeLessThanOrEqual(30));
    });
    test('19 ‚Äì multi-sentence with different punctuations', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('A! B? C...');
        expect(r).toEqual(['A!', 'B?', 'C...']);
    });
    test('20 ‚Äì bracket content does not confuse split', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('N·ªôi dung (v√≠ d·ª•: TP.HCM) v·∫´n ·ªïn. K·∫øt th√∫c.');
        expect(r).toEqual(['N·ªôi dung (v√≠ d·ª•: TP.HCM) v·∫´n ·ªïn.', 'K·∫øt th√∫c.']);
    });
    test('21 ‚Äì semicolon as breath hint in long sentence', () => {
        const s = 'C√¢u n√†y d√†i nhi·ªÅu t·ª´; n√≥ d√πng ch·∫•m ph·∫©y ƒë·ªÉ g·ª£i √Ω ƒëi·ªÉm ng·∫Øt h·ª£p l√Ω nh·∫±m d·ªÖ ƒë·ªçc h∆°n v√† b·ªõt d√†i d√≤ng khi ph√°t √¢m.';
        const r = (0, segmenter_1.splitParagraphToSentences)(s);
        expect(r.length).toBeGreaterThanOrEqual(1);
    });
    test('22 ‚Äì lowercase after dot should avoid split mid-sentence', () => {
        const r = (0, segmenter_1.splitParagraphToSentences)('V√≠ d·ª• vi·∫øt t·∫Øt a.b th·ª≠ nghi·ªám. K·∫øt th√∫c.');
        expect(r).toEqual(['V√≠ d·ª• vi·∫øt t·∫Øt a.b th·ª≠ nghi·ªám.', 'K·∫øt th√∫c.']);
    });
});
describe('segmenter.splitToBlocks', () => {
    test('23 ‚Äì mono: paragraphs -> blocks with rows', () => {
        const raw = 'ƒêo·∫°n m·ªôt. C√¢u hai.\n\nƒêo·∫°n ba!';
        const blocks = (0, segmenter_1.splitToBlocks)('mono', raw);
        expect(blocks.length).toBe(2);
        expect(blocks[0].rows.length).toBe(2);
        expect(blocks[1].rows.length).toBe(1);
    });
    test('24 ‚Äì dialog: [Name]: line -> speaker and rows', () => {
        const raw = '[Nam]: Xin ch√†o!\n[Lan]: Ch√†o b·∫°n, r·∫•t vui ƒë∆∞·ª£c g·∫∑p.';
        const blocks = (0, segmenter_1.splitToBlocks)('dialog', raw);
        expect(blocks.length).toBe(2);
        expect(blocks[0].speaker).toBe('Nam');
        expect(blocks[1].speaker).toBe('Lan');
        expect(blocks[0].rows[0]).toMatch(/Xin ch√†o/);
    });
    test('25 ‚Äì dialog: malformed line -> speaker Unknown', () => {
        const raw = 'Xin ch√†o kh√¥ng c√≥ nh√£n.\n[Lan]: C√≥ nh√£n.';
        const blocks = (0, segmenter_1.splitToBlocks)('dialog', raw);
        expect(blocks[0].speaker).toBe('Unknown');
        expect(blocks[1].speaker).toBe('Lan');
    });
});
//# sourceMappingURL=segmenter.spec.js.map